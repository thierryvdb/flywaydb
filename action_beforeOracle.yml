# action.yml
name: "Database Migration Action"
description: "A GitHub Action to perform database migrations using Flyway."
author: "thierry.p.broucke@altice.pt"

inputs:
  DATABASE:
    description: "Database name"
    required: false
  JDBC:
    description: "JDBC connection string"
    required: true
  PASSWORD:
    description: "Database password"
    required: true
  USERNAME:
    description: "Database username"
    required: true
  SCHEMAS:
    description: "Database schemas"
    required: false
    default: ""
  DIALECT:
    description: "Database dialect (e.g., mysql, postgresql)"
    required: true
  REPO_NAME:
    description: "Repository name"
    required: true
  ROOT_PASSWORD:
    description: "Root password for the database in the dummy environment"
    required: false
  FLYWAY_LOCATIONS:
    description: "Location(s) where Flyway will search for migration files"
    required: false
    default: "migrations"
  FLYWAY_USER:
    description: "Flyway authentication username"
    required: true
  FLYWAY_PASSWORD:
    description: "Flyway authentication password"
    required: true
  FLYWAY_CLI_INSTALL_CHECK:
    description: "Define if should check for existing flyway or not"
    required: false
    default: true
  FLYWAY_VERSION:
    description: "Default flyway version 10.20.1"
    required: false
    default: "10.20.1"
  FLYWAY_INSTALL_DIRECTORY:
    description: "Where the cli should be installed, default is local dir then it will create a symbolic lynk to /usr/bin"
    required: false
    default: ""

#outputs:
#  DBVERSION:
#    description: "The database version"

runs:
  using: 'composite'
  steps:
    - name: Set Up Variables
      id: set-vars
      shell: bash
      run: |
        # Assign inputs to variables
        echo "DATABASE=${{ inputs.DATABASE }}" >> $GITHUB_ENV
        echo "JDBC=${{ inputs.JDBC }}" >> $GITHUB_ENV
        echo "PASSWORD=${{ inputs.PASSWORD }}" >> $GITHUB_ENV
        echo "USERNAME=${{ inputs.USERNAME }}" >> $GITHUB_ENV
        echo "SCHEMAS=${{ inputs.SCHEMAS }}" >> $GITHUB_ENV
        echo "DIALECT=${{ inputs.DIALECT }}" >> $GITHUB_ENV
        echo "REPO_NAME=${{ inputs.REPO_NAME }}" >> $GITHUB_ENV
        echo "ROOT_PASSWORD=${{ inputs.ROOT_PASSWORD }}" >> $GITHUB_ENV
        echo "FLYWAY_LOCATIONS=${{ inputs.FLYWAY_LOCATIONS }}" >> $GITHUB_ENV
        echo "FLYWAY_USER=${{ inputs.FLYWAY_USER }}" >> $GITHUB_ENV
        echo "FLYWAY_PASSWORD=${{ inputs.FLYWAY_PASSWORD }}" >> $GITHUB_ENV
        echo "GITHUB_STEP_SUMMARY=${GITHUB_STEP_SUMMARY}" >> $GITHUB_ENV
        echo "GITHUB_WORKSPACE=${GITHUB_WORKSPACE}" >> $GITHUB_ENV
    - name: Debug Variables
      shell: bash
      run: |
        echo "DATABASE: $DATABASE"
        echo "JDBC: $JDBC"
        echo "PASSWORD: [REDACTED]"
        echo "USERNAME: $USERNAME"
        echo "SCHEMAS: $SCHEMAS"
        echo "DIALECT: $DIALECT"
        echo "REPO_NAME: $REPO_NAME"
        echo "ROOT_PASSWORD: [REDACTED]"
        echo "FLYWAY_LOCATIONS: $FLYWAY_LOCATIONS"
        echo "FLYWAY_USER: $FLYWAY_USER"
        echo "FLYWAY_PASSWORD: [REDACTED]"

    - name: Check Required Secrets
      shell: bash
      run: |
        check_secret() {
          if [ -z "$1" ]; then
            echo "The '$2' secret is not set. Please set it in your repository settings."
            echo "😤 The variable '$2' is missing." >> "$GITHUB_STEP_SUMMARY"
            exit 1
          else
            echo "$2 Secret :green_circle: " >> "$GITHUB_STEP_SUMMARY"
          fi
        }
        #check_secret "$DATABASE" "DATABASE"
        check_secret "$JDBC" "JDBC"
        check_secret "$PASSWORD" "PASSWORD"
        check_secret "$USERNAME" "USERNAME"
        check_secret "$DIALECT" "DIALECT"
        check_secret "$REPO_NAME" "REPO_NAME"
        #check_secret "$ROOT_PASSWORD" "ROOT_PASSWORD"
        check_secret "$FLYWAY_LOCATIONS" "FLYWAY_LOCATIONS"
        check_secret "$FLYWAY_USER" "FLYWAY_USER"
        check_secret "$FLYWAY_PASSWORD" "FLYWAY_PASSWORD"
    - name: Extract JDBC Values
      shell: bash
      run: |
        HOST=$(echo "$JDBC"  | sed 's/.*\/\/\([^:]*\).*/\1/')
        PORT=$(echo "$JDBC"  | sed 's/.*:\([^\/]*\).*/\1/') 
        DATABASE_NAME=$(echo "$JDBC" | sed 's/.*\/\([^\/]*\)/\1/')
        
        echo "Connection: $JDBC" >> "$GITHUB_STEP_SUMMARY"
        echo "Host: $HOST" >> "$GITHUB_STEP_SUMMARY"
        echo "Port: $PORT" >> "$GITHUB_STEP_SUMMARY"
        echo "DB: $DATABASE_NAME" >> "$GITHUB_STEP_SUMMARY"
        echo "USERNAME: $USERNAME" >> "$GITHUB_STEP_SUMMARY"
        echo "HOST=$HOST" >> $GITHUB_ENV
        echo "PORT=$PORT" >> $GITHUB_ENV
        echo "DATABASE_NAME=$DATABASE_NAME" >> $GITHUB_ENV
        echo "REPO_NEWNAME="${REPO_NAME//-/_}"" >> $GITHUB_ENV

    - name: Check if Flyway is installed
      shell: bash
      run: |
        if type flyway > /dev/null 2>&1; then
          echo "Flyway is presente, do nothing"
        else
          echo "Couldn't find Flyway, I'll install it now"
          bash ${{ GITHUB.WORKSPACE }}/Scripts/Flyway_DownloadAndInstallCLI_Unix.sh
        fi    
    - name: Check Database Connection
      shell: bash
      run: |
        echo "✋- Check Database Connection" >> "$GITHUB_STEP_SUMMARY"
        echo "Checking connection to Database $DATABASE" >> "$GITHUB_STEP_SUMMARY"
        if [ "$DIALECT" = "mysql" ]; then
          RESULT=$(mysql -h "$HOST" -P "$PORT" -u "$USERNAME" -p"$PASSWORD" "$DATABASE_NAME" -s --skip-column-names -e "SELECT 1;")
          if [ "$RESULT" == "1" ]; then
            echo "Connection Successful :green_circle: " >> "$GITHUB_STEP_SUMMARY"
          else
            echo "Connection Failed :red_circle: " >> "$GITHUB_STEP_SUMMARY"
            exit 1
          fi
        elif [ "$DIALECT" = "postgresql" ]; then
          RESULT=$(PGPASSWORD="$PASSWORD" psql -h "$HOST" -p "$PORT" -U "$USERNAME" -d "$DATABASE_NAME" -c "SELECT 1;" -tA)
          if [[ "$RESULT" == "1" ]]; then
            echo "Connection Successful :green_circle: " >> "$GITHUB_STEP_SUMMARY"
          else
            echo "Connection Failed :red_circle: " >> "$GITHUB_STEP_SUMMARY"
            exit 1
          fi
        else
          echo "Unsupported dialect: $DIALECT" >> "$GITHUB_STEP_SUMMARY"
          exit 1
        fi
    - name: Get Database Version
      shell: bash
      run: |
        echo "✋- Get Database Version" >> "$GITHUB_STEP_SUMMARY"
        echo "Getting the database version" >> "$GITHUB_STEP_SUMMARY"
        if [ "$DIALECT" = "mysql" ]; then
          version=$(mysql -h "$HOST" -P "$PORT" -u "$USERNAME" -p"$PASSWORD" -D "$DATABASE_NAME" -s --skip-column-names -e "SELECT VERSION();")
          echo "DBVERSION=$version" >> $GITHUB_OUTPUT
          echo "DBVERSION=$version" >> $GITHUB_ENV
          echo "🐬 $DIALECT Version: $version" >> "$GITHUB_STEP_SUMMARY"
        elif [ "$DIALECT" = "postgresql" ]; then
          version=$(PGPASSWORD="$PASSWORD" psql -h "$HOST" -p "$PORT" -U "$USERNAME" -d "$DATABASE_NAME" -c "SHOW server_version;" -tA)
          echo "DBVERSION=$version" >> $GITHUB_OUTPUT
          echo "DBVERSION=$version" >> $GITHUB_ENV
          echo "🐘 $DIALECT Version: $version" >> "$GITHUB_STEP_SUMMARY"
        fi
    - name: Generate Database Backup
      shell: bash
      run: |
        echo "✋- Generate Database Backup" >> "$GITHUB_STEP_SUMMARY"
        echo "Generating a metadata backup" >> "$GITHUB_STEP_SUMMARY"
        if [ "$DIALECT" = "mysql" ]; then
          mysqldump -h "$HOST" -P "$PORT" -u "$USERNAME" -p"$PASSWORD" --no-data --databases "$DATABASE_NAME" --no-tablespaces > database.dmp
          echo "Backup created: database.dmp" >> "$GITHUB_STEP_SUMMARY"
          ls -al database.dmp >> "$GITHUB_STEP_SUMMARY"
        elif [ "$DIALECT" = "postgresql" ]; then
          PGPASSWORD="$PASSWORD" pg_dump -h "$HOST" -p "$PORT" -U "$USERNAME" --no-owner --no-acl --schema-only --dbname="$DATABASE_NAME" -F p -b -v -f database.dmp
          echo "Backup created: database.dmp" >> "$GITHUB_STEP_SUMMARY"
          ls -al database.dmp >> "$GITHUB_STEP_SUMMARY"
        fi
    - name: Create Dummy Database
      shell: bash
      env:
        DBV: ${{ env.DBVERSION }}
      run: |
        echo "✋- Create Dummy Database" >> "$GITHUB_STEP_SUMMARY"
        echo "Creating the dummy Database" >> "$GITHUB_STEP_SUMMARY"

        # Stop and remove the container if it already exists
        if docker ps -a --format "{{.Names}}" | grep -q "^$REPO_NAME$"; then
          echo "Stopping and removing existing container '$REPO_NAME'" >> "$GITHUB_STEP_SUMMARY"
          docker stop "$REPO_NAME" && docker rm "$REPO_NAME"
          # Wait for a few seconds to ensure the container is removed
          sleep 5
        fi

        # Read the local port range from /proc/sys/net/ipv4/ip_local_port_range
        read lower_port upper_port < /proc/sys/net/ipv4/ip_local_port_range

        # Function to check if a port is in use
        is_port_in_use() {
            local port=$1
            if nc -z localhost $port; then
                return 0  # Port is in use
            else
                return 1  # Port is not in use
            fi
        }

        # Function to find a random unused port within the range
        find_unused_port() {
            local port
            while true; do
                # Get a random port number within the system's ephemeral port range
                port=$(shuf -i $lower_port-$upper_port -n 1)
                if ! is_port_in_use $port; then
                    echo $port  # Return the port if it is not in use
                    break
                fi
            done
        }

        # Find and print an unused random port
        unused_port=$(find_unused_port)
        echo "unused_port=$unused_port" >> $GITHUB_ENV
        echo "✋- Using port: $unused_port" >> "$GITHUB_STEP_SUMMARY"


        if [ "$DIALECT" = "mysql" ]; then
          # Run the MySQL container using docker
          docker run --name "$REPO_NAME" -e MYSQL_ALLOW_EMPTY_PASSWORD=yes -d -p $unused_port:3306 mysql:${DBV}
          echo "MySQL container '$REPO_NAME' created successfully without root password." >> "$GITHUB_STEP_SUMMARY"
          
          # Wait for MySQL to initialize
          until sudo docker exec "$REPO_NAME" mysqladmin ping --silent; do
            echo "Waiting for MySQL to start..."
            sleep 5
          done
        elif [ "$DIALECT" = "postgresql" ]; then
          echo "Creating pg_hba and init.sql file"
          echo "host all all all trust" >> pg_hba.conf
          echo "ALTER USER admin WITH PASSWORD NULL;" > init.sql
          echo "Set custom_pgdata permissions"
          mkdir -p custom_pgdata
          sudo chmod -R 777 custom_pgdata
          sudo chown ghrunner.ghrunner custom_pgdata init.sql pg_hba.conf

          echo "Generate random password for postgres"
          # Generate a random 8-character password
          POSTGRES_PASSWORD=$(openssl rand -base64 8 | tr -dc 'A-Za-z0-9' | head -c 8) 
          echo "POSTGRES_PASSWORD=$POSTGRES_PASSWORD" >> $GITHUB_ENV
          # Output the generated password to the GitHub Step Summary
          echo "Dummy - PostgreSql user '$USERNAME' created with password: $POSTGRES_PASSWORD" >> "$GITHUB_STEP_SUMMARY"

          # Run the PostgreSQL container using docker

          docker run --name "$REPO_NAME" -e POSTGRES_USER="admin"  -e POSTGRES_PASSWORD=$POSTGRES_PASSWORD -d -p $unused_port:5432 postgres:12

          echo "PostgreSQL container '$REPO_NAME' created successfully with admin password." >> "$GITHUB_STEP_SUMMARY"

          # Wait for PostgreSQL to initialize
          until PGPASSWORD=$POSTGRES_PASSWORD docker exec "$REPO_NAME" pg_isready -U admin; do
            echo "Waiting for PostgreSQL to start..."
            sleep 2
          done
          
          echo "Create the pg_hba.conf file"
          docker exec "$REPO_NAME" bash -c "echo 'host all all all trust' >> /var/lib/postgresql/data/pg_hba.conf"

          echo "Low permission restart on container"
          docker restart "$REPO_NAME"
          
          # Wait for PostgreSQL to initialize
          until PGPASSWORD=$POSTGRES_PASSWORD docker exec "$REPO_NAME" pg_isready -U admin; do
            echo "Waiting for PostgreSQL to start..."
            sleep 2
          done

          # Create the database
          PGPASSWORD=$POSTGRES_PASSWORD docker exec "$REPO_NAME" psql -U admin -c "CREATE DATABASE \"$REPO_NEWNAME\";"
          echo "Database '$REPO_NEWNAME' created in PostgreSQL container." >> "$GITHUB_STEP_SUMMARY"

        else
          echo "Unsupported dialect for creating dummy database: $DIALECT" >> "$GITHUB_STEP_SUMMARY"
          exit 1
        fi

    - name: Restore Database to Dummy Environment
      shell: bash
      env:
        DUMMY_PORT: ${{ env.unused_port }}
        PGDUMMY_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
      run: |
        echo "✋- Restore Database to Dummy Environment" >> "$GITHUB_STEP_SUMMARY"
        echo "Restoring to the database version" >> "$GITHUB_STEP_SUMMARY"
        if [ "$DIALECT" = "mysql" ]; then
          echo "Alter internal Database name to $REPO_NEWNAME"
          sed -i "s/CREATE DATABASE.*\`[a-zA-Z0-9_]*\`/CREATE DATABASE \`$REPO_NEWNAME\`/g" database.dmp
          sed -i "s/USE \`[a-zA-Z0-9_]*\`/USE \`$REPO_NEWNAME\`/g" database.dmp
          echo "Validate change"
          grep -E "CREATE DATABASE|USE" database.dmp
          echo "Copy Backup to Container"
          docker cp database.dmp "$REPO_NAME":/tmp/database.dmp
          echo "Check if backup has been copied"
          docker exec "$REPO_NAME" ls /tmp/database.dmp || { echo "Backup file not found in container" >> "$GITHUB_STEP_SUMMARY"; exit 1; }
          echo "Restoring database"
          docker exec "$REPO_NAME" mysql -uroot -e "source /tmp/database.dmp;"
          echo "Database restored successfully" >> "$GITHUB_STEP_SUMMARY"
          echo "Show tables"
          docker exec "$REPO_NAME" mysql -uroot -e "SHOW TABLES IN $REPO_NEWNAME;"

          #TODO Create a conditional here, baseline should be done only when no schema_history is present
          # Create Flyway baseline
          #flyway -user="$USERNAME" -password="$PASSWORD" -url="jdbc:mysql://$HOST:$DUMMY_PORT/$REPO_NEWNAME" -baselineOnMigrate=true -locations="filesystem:$FLYWAY_LOCATIONS" baseline
          #echo "Flyway baseline created for MySQL" >> "$GITHUB_STEP_SUMMARY"

          # Generate a random 8-character password
          MYSQL_USER_PASSWORD=$(openssl rand -base64 8 | tr -dc 'A-Za-z0-9' | head -c 8) 
          echo "MYSQL_USER_PASSWORD=$MYSQL_USER_PASSWORD" >> $GITHUB_ENV

          # Create MySQL user with the specified username and random password
          echo "Creating user '$USERNAME' with admin permissions"
          docker exec "$REPO_NAME" mysql -uroot -e "CREATE USER '$USERNAME'@'%' IDENTIFIED BY '$MYSQL_USER_PASSWORD';"
          docker exec "$REPO_NAME" mysql -uroot -e "GRANT ALL PRIVILEGES ON \`$REPO_NEWNAME\`.* TO '$USERNAME'@'%';"
          docker exec "$REPO_NAME" mysql -uroot -e "FLUSH PRIVILEGES;"

          # Output the generated password to the GitHub Step Summary
          echo "Dummy - MySQL user '$USERNAME' created with password: $MYSQL_USER_PASSWORD" >> "$GITHUB_STEP_SUMMARY"

        elif [ "$DIALECT" = "postgresql" ]; then
          echo "Copy database to container"
          docker cp database.dmp "$REPO_NAME":/tmp/database.dmp

          echo "Creating user '$USERNAME' with admin permissions for PostgreSQL"

          # Create the user and set their password
          PGPASSWORD=$PGDUMMY_PASSWORD docker exec "$REPO_NAME" psql -U admin -c "CREATE USER $USERNAME WITH PASSWORD '$PGDUMMY_PASSWORD';"

          # Grant all privileges on the database to the user
          PGPASSWORD=$PGDUMMY_PASSWORD docker exec "$REPO_NAME" psql -U admin -c "GRANT ALL PRIVILEGES ON DATABASE \"$REPO_NEWNAME\" TO $USERNAME;"

          # Optionally, make the user a superuser if you want admin privileges
          PGPASSWORD=$PGDUMMY_PASSWORD docker exec "$REPO_NAME" psql -U admin -d postgres -c "ALTER USER $USERNAME WITH SUPERUSER;"

          docker exec "$REPO_NAME" sh -c "PGPASSWORD=$PGDUMMY_PASSWORD psql -h \"$HOST\" -p \"$DUMMY_PORT\" -U \"admin\" -d \"$REPO_NEWNAME\" -f /tmp/database.dmp"

          echo "Database restored successfully" >> "$GITHUB_STEP_SUMMARY"

          #TODO Create a conditional here, baseline should be done only when no schema_history is present
          # Create Flyway baseline
          #flyway -user="$USERNAME" -password="$PGDUMMY_PASSWORD" -url="jdbc:postgresql://$HOST:$DUMMY_PORT/$REPO_NEWNAME" -baselineOnMigrate=true -locations="filesystem:$FLYWAY_LOCATIONS" baseline
          #echo "Flyway baseline created for PostgreSQL" >> "$GITHUB_STEP_SUMMARY"
        fi

    - name: Run Flyway Info On Dummy
      shell: bash
      env:
        DUMMY_USER: ${{ env.USERNAME }}
        DUMMY_PASSWORD: ${{ env.MYSQL_USER_PASSWORD }}
        DUMMY_PORT: ${{ env.unused_port }}
        PGDUMMY_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
      run: |
        echo "✋- Run Flyway Clean Info" >> "$GITHUB_STEP_SUMMARY"
        echo "Running Flyway Clean Info with dummy user on port $DUMMY_PORT" >> "$GITHUB_STEP_SUMMARY"
        echo "Check variables : "
        echo "DUMMY_USER: $DUMMY_USER"
        echo "DUMMY_PASSWORD: $DUMMY_PASSWORD"
        echo "DUMMY_PORT: $DUMMY_PORT"
        echo "REPO_NEWNAME: $REPO_NEWNAME"
        echo "FLYWAY_LOCATIONS: $FLYWAY_LOCATIONS"

        # Temporary file to store Flyway output
        FLYWAY_OUTPUT_FILE=$(mktemp)
        if [ "$DIALECT" = "mysql" ]; then
        # Authenticate and run Flyway info using dummy user credentials and the specified port
          flyway info clean info -user="$DUMMY_USER" -password="$DUMMY_PASSWORD" -baselineOnMigrate="true" -locations="filesystem:$FLYWAY_LOCATIONS" info -url="jdbc:$DIALECT://$HOST:$DUMMY_PORT/$REPO_NEWNAME?useSSL=false&allowPublicKeyRetrieval=true" -cleanDisabled=false | tee "$FLYWAY_OUTPUT_FILE"
        elif [ "$DIALECT" = "postgresql" ]; then
          flyway info clean info -user="$DUMMY_USER" -password="$PGDUMMY_PASSWORD" -baselineOnMigrate="true" -locations="filesystem:$FLYWAY_LOCATIONS" info -url="jdbc:$DIALECT://$HOST:$DUMMY_PORT/$REPO_NEWNAME" -cleanDisabled=false | tee "$FLYWAY_OUTPUT_FILE"
        fi
        echo ":rocket:" >> "$GITHUB_STEP_SUMMARY"
        
    - name: Run Flyway migrate on Dummy
      shell: bash
      env:
        DUMMY_USER: ${{ env.USERNAME }}
        DUMMY_PASSWORD: ${{ env.MYSQL_USER_PASSWORD }}
        PGDUMMY_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
        DUMMY_PORT: ${{ env.unused_port }}
      run: |
        echo "✋- Run Flyway Migrations" >> "$GITHUB_STEP_SUMMARY"
        echo "Running Flyway migrations" >> "$GITHUB_STEP_SUMMARY"
        FLYWAY_OUTPUT_FILE=$(mktemp)
        if [ "$DIALECT" = "mysql" ]; then
          flyway info migrate info -user="$DUMMY_USER" -password="$DUMMY_PASSWORD" -baselineOnMigrate="true" -locations="filesystem:$FLYWAY_LOCATIONS" -url="jdbc:$DIALECT://$HOST:$DUMMY_PORT/$REPO_NEWNAME?useSSL=false&allowPublicKeyRetrieval=true" | tee "$FLYWAY_OUTPUT_FILE"
        elif [ "$DIALECT" = "postgresql" ]; then
          flyway info migrate info -user="$DUMMY_USER" -password="$PGDUMMY_PASSWORD" -baselineOnMigrate="true" -locations="filesystem:$FLYWAY_LOCATIONS" -url="jdbc:$DIALECT://$HOST:$DUMMY_PORT/$REPO_NEWNAME" | tee "$FLYWAY_OUTPUT_FILE"
        fi
        echo ":rocket:" >> "$GITHUB_STEP_SUMMARY"
     
    - name: Run Flyway on Production
      shell: bash
      run: |
        if [ "$DIALECT" = "mysql" ]; then
          flyway -user="$USERNAME" -password="$PASSWORD" -url="$JDBC?useSSL=false&allowPublicKeyRetrieval=true" -locations="filesystem:$FLYWAY_LOCATIONS" info
          flyway -user="$USERNAME" -password="$PASSWORD" -url="$JDBC?useSSL=false&allowPublicKeyRetrieval=true" -locations="filesystem:$FLYWAY_LOCATIONS" repair
        elif [ "$DIALECT" = "postgresql" ]; then
          flyway -user="$USERNAME" -password="$PASSWORD" -url="$JDBC" -locations="filesystem:$FLYWAY_LOCATIONS" info
          flyway -user="$USERNAME" -password="$PASSWORD" -url="$JDBC" -locations="filesystem:$FLYWAY_LOCATIONS" repair
        fi
      continue-on-error: true    

    - name: Migrate to Production DB
      shell: bash
      if: ${{ true }}
      run: |
        FLYWAY_OUTPUT_FILE=$(mktemp)
        if [ "$DIALECT" = "mysql" ]; then
          echo "Doing the actual migrate"
          flyway info migrate info -user="$USERNAME" -password="$PASSWORD" -baselineOnMigrate="true" -locations="filesystem:$FLYWAY_LOCATIONS" -url="$JDBC?useSSL=false&allowPublicKeyRetrieval=true" | tee "$FLYWAY_OUTPUT_FILE"
        elif [ "$DIALECT" = "postgresql" ]; then
          echo "Doing the actual migrate"
          flyway info migrate info -user="$USERNAME" -password="$PASSWORD" -baselineOnMigrate="true" -locations="filesystem:$FLYWAY_LOCATIONS" -url="$JDBC" | tee "$FLYWAY_OUTPUT_FILE"  
        fi

        RESULT=$(cat "$FLYWAY_OUTPUT_FILE" | sed '/+-----------+-------------+-------------+------+---------------------+---------+----------+/d' | grep "Schema version" -A9999 | tail -n +3 )
        
        # Generate HTML table and skip rows without meaningful data
        html_table=$(echo "$RESULT" | awk 'BEGIN {
          FS="|";
          print "<table>";
          print "<tr><th>Category</th><th>Version</th><th>Description</th><th>Type</th><th>Installed On</th><th>State</th><th>Undoable</th></tr>"
        }
        NR > 2 && NF {
          # Trim spaces from each column
          gsub(/^ +| +$/,"",$2);
          gsub(/^ +| +$/,"",$3);
          gsub(/^ +| +$/,"",$4);
          gsub(/^ +| +$/,"",$5);
          gsub(/^ +| +$/,"",$6);
          gsub(/^ +| +$/,"",$7);
          gsub(/^ +| +$/,"",$8);

          state = $7;
          # Only add emoji if the state is "Success"
          if (state == "Success") {
            state = state " :green_circle: ";
          } else if (state == "Pending") {
            state = state " :red_circle: ";
          } else {
            state = "";  # Avoid emoji if no state info
          }

          # Print row only if it has meaningful data
          if ($2 != "" || $3 != "" || $4 != "" || $5 != "" || $6 != "" || $7 != "" || $8 != "") {
            print "<tr><td>"$2"</td><td>"$3"</td><td>"$4"</td><td>"$5"</td><td>"$6"</td><td>"state"</td><td>"$8"</td></tr>";
          }
        }
        END {
          print "</table>"
        }')

        echo "$html_table" >> "$GITHUB_STEP_SUMMARY"   
   
    - name: Finish
      shell: bash
      run: |
        echo "Finish" >> "$GITHUB_STEP_SUMMARY"
